services:
  app:
    container_name: app
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    image: node:22.2.0-bookworm-slim  # Dockerfileのベースイメージと同じにする
    environment:
      - HOST=0.0.0.0
    volumes:
      - "./frontend/project:/usr/src/project"
    ports:
      - "3000:3000"
    working_dir: "/usr/src/project"
    tty: true
    depends_on:
      - api
      - web
  api:
    container_name: api
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    image: "php:8.3"
    volumes:
      - ./backend:/var/www
    #   - ./backend/conf.d/custom-php.ini:/usr/local/etc/php/conf.d/zz-custom-php.ini:ro # 読み取り専用でマウントする
    # environment:
    #   - TZ=Asia/Tokyo # コンテナ自体のタイムゾーンの設定
    working_dir: "/var/www/project"
    tty: true
    depends_on:
      - db
  web:
    container_name: web
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./backend:/var/www
    depends_on:
      - api
  db: # mysql -h localhost -u user -ppass
    container_name: db
    image: mysql:8.4
    ports:
      - 3306:3306
    volumes:
      - ./mysql/script:/docker-entrypoint-initdb.d
      - ./mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf
      - db-store:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: laravel
      MYSQL_USER: user
      MYSQL_PASSWORD: pass
      TZ: Asia/Tokyo
  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db  # データベースサービス名を指定
      # ADMINER_DESIGN: flat
    depends_on:
      - db
volumes:
  db-store:
    name: db-store
